{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Efficeint_Main.ipynb","provenance":[{"file_id":"1LzSDDUM-wstuReiIRY5q-PLn_hfFiUVa","timestamp":1592118047194}],"collapsed_sections":[],"mount_file_id":"1LzSDDUM-wstuReiIRY5q-PLn_hfFiUVa","authorship_tag":"ABX9TyNUu78kt6riE0fMB2rnKUGh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"6a660955b36d46049a2ab8a5c2bc724c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_0f97938a13f1435780937a8e10165d87","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_90f953a2432b4c169bf0f53b0b0cf2e2","IPY_MODEL_a2592519eab448afbcabb5e2d0914ec1"]}},"0f97938a13f1435780937a8e10165d87":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"90f953a2432b4c169bf0f53b0b0cf2e2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_b2ea2a9fa49c40d8993b6cc64e9df8a3","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_486d685046ce4904abf49b37e6a1eceb"}},"a2592519eab448afbcabb5e2d0914ec1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c5ff8007a5304f9c99c342eda04b9c90","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"â€‹","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 170500096/? [00:30&lt;00:00, 17467241.29it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_61db3b6a6f804f2da4d0a34f625a15b4"}},"b2ea2a9fa49c40d8993b6cc64e9df8a3":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"486d685046ce4904abf49b37e6a1eceb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c5ff8007a5304f9c99c342eda04b9c90":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"61db3b6a6f804f2da4d0a34f625a15b4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"id":"3NGXZwWrjJHc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"outputId":"ab4b5e3e-537c-4c22-f0b3-0f14366ae77f","executionInfo":{"status":"ok","timestamp":1592113462942,"user_tz":-330,"elapsed":10741,"user":{"displayName":"rahul kanojia","photoUrl":"https://lh5.googleusercontent.com/-B4ue9wpQx_0/AAAAAAAAAAI/AAAAAAAAOTw/CtXLmFtMNOc/s64/photo.jpg","userId":"16980906388447563855"}}},"source":["!git clone https://github.com/kuangliu/pytorch-cifar.git  \n","%cd pytorch-cifar/"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Cloning into 'pytorch-cifar'...\n","remote: Enumerating objects: 330, done.\u001b[K\n","Receiving objects:   0% (1/330)   \rReceiving objects:   1% (4/330)   \rReceiving objects:   2% (7/330)   \rReceiving objects:   3% (10/330)   \rReceiving objects:   4% (14/330)   \rReceiving objects:   5% (17/330)   \rReceiving objects:   6% (20/330)   \rReceiving objects:   7% (24/330)   \rReceiving objects:   8% (27/330)   \rReceiving objects:   9% (30/330)   \rReceiving objects:  10% (33/330)   \rReceiving objects:  11% (37/330)   \rReceiving objects:  12% (40/330)   \rReceiving objects:  13% (43/330)   \rReceiving objects:  14% (47/330)   \rReceiving objects:  15% (50/330)   \rReceiving objects:  16% (53/330)   \rReceiving objects:  17% (57/330)   \rReceiving objects:  18% (60/330)   \rReceiving objects:  19% (63/330)   \rReceiving objects:  20% (66/330)   \rReceiving objects:  21% (70/330)   \rReceiving objects:  22% (73/330)   \rReceiving objects:  23% (76/330)   \rReceiving objects:  24% (80/330)   \rReceiving objects:  25% (83/330)   \rReceiving objects:  26% (86/330)   \rReceiving objects:  27% (90/330)   \rReceiving objects:  28% (93/330)   \rReceiving objects:  29% (96/330)   \rReceiving objects:  30% (99/330)   \rReceiving objects:  31% (103/330)   \rReceiving objects:  32% (106/330)   \rReceiving objects:  33% (109/330)   \rReceiving objects:  34% (113/330)   \rReceiving objects:  35% (116/330)   \rReceiving objects:  36% (119/330)   \rReceiving objects:  37% (123/330)   \rReceiving objects:  38% (126/330)   \rReceiving objects:  39% (129/330)   \rReceiving objects:  40% (132/330)   \rReceiving objects:  41% (136/330)   \rReceiving objects:  42% (139/330)   \rReceiving objects:  43% (142/330)   \rReceiving objects:  44% (146/330)   \rReceiving objects:  45% (149/330)   \rReceiving objects:  46% (152/330)   \rReceiving objects:  47% (156/330)   \rReceiving objects:  48% (159/330)   \rReceiving objects:  49% (162/330)   \rReceiving objects:  50% (165/330)   \rReceiving objects:  51% (169/330)   \rReceiving objects:  52% (172/330)   \rReceiving objects:  53% (175/330)   \rReceiving objects:  54% (179/330)   \rReceiving objects:  55% (182/330)   \rReceiving objects:  56% (185/330)   \rReceiving objects:  57% (189/330)   \rReceiving objects:  58% (192/330)   \rReceiving objects:  59% (195/330)   \rReceiving objects:  60% (198/330)   \rReceiving objects:  61% (202/330)   \rReceiving objects:  62% (205/330)   \rReceiving objects:  63% (208/330)   \rReceiving objects:  64% (212/330)   \rReceiving objects:  65% (215/330)   \rReceiving objects:  66% (218/330)   \rReceiving objects:  67% (222/330)   \rReceiving objects:  68% (225/330)   \rReceiving objects:  69% (228/330)   \rReceiving objects:  70% (231/330)   \rReceiving objects:  71% (235/330)   \rReceiving objects:  72% (238/330)   \rReceiving objects:  73% (241/330)   \rReceiving objects:  74% (245/330)   \rReceiving objects:  75% (248/330)   \rReceiving objects:  76% (251/330)   \rReceiving objects:  77% (255/330)   \rReceiving objects:  78% (258/330)   \rReceiving objects:  79% (261/330)   \rReceiving objects:  80% (264/330)   \rremote: Total 330 (delta 0), reused 0 (delta 0), pack-reused 330\u001b[K\n","Receiving objects:  81% (268/330)   \rReceiving objects:  82% (271/330)   \rReceiving objects:  83% (274/330)   \rReceiving objects:  84% (278/330)   \rReceiving objects:  85% (281/330)   \rReceiving objects:  86% (284/330)   \rReceiving objects:  87% (288/330)   \rReceiving objects:  88% (291/330)   \rReceiving objects:  89% (294/330)   \rReceiving objects:  90% (297/330)   \rReceiving objects:  91% (301/330)   \rReceiving objects:  92% (304/330)   \rReceiving objects:  93% (307/330)   \rReceiving objects:  94% (311/330)   \rReceiving objects:  95% (314/330)   \rReceiving objects:  96% (317/330)   \rReceiving objects:  97% (321/330)   \rReceiving objects:  98% (324/330)   \rReceiving objects:  99% (327/330)   \rReceiving objects: 100% (330/330)   \rReceiving objects: 100% (330/330), 74.58 KiB | 214.00 KiB/s, done.\n","Resolving deltas:   0% (0/165)   \rResolving deltas:   2% (4/165)   \rResolving deltas:   3% (5/165)   \rResolving deltas:   6% (11/165)   \rResolving deltas:   7% (12/165)   \rResolving deltas:  20% (34/165)   \rResolving deltas:  21% (35/165)   \rResolving deltas:  23% (38/165)   \rResolving deltas:  24% (40/165)   \rResolving deltas:  25% (42/165)   \rResolving deltas:  26% (43/165)   \rResolving deltas:  27% (46/165)   \rResolving deltas:  30% (50/165)   \rResolving deltas:  31% (52/165)   \rResolving deltas:  33% (56/165)   \rResolving deltas:  40% (67/165)   \rResolving deltas:  47% (79/165)   \rResolving deltas:  48% (80/165)   \rResolving deltas:  49% (82/165)   \rResolving deltas:  50% (84/165)   \rResolving deltas:  52% (87/165)   \rResolving deltas:  53% (89/165)   \rResolving deltas:  54% (90/165)   \rResolving deltas:  56% (93/165)   \rResolving deltas:  57% (95/165)   \rResolving deltas:  60% (100/165)   \rResolving deltas:  67% (111/165)   \rResolving deltas:  68% (113/165)   \rResolving deltas:  72% (120/165)   \rResolving deltas:  73% (122/165)   \rResolving deltas:  74% (123/165)   \rResolving deltas:  81% (134/165)   \rResolving deltas:  83% (137/165)   \rResolving deltas:  84% (139/165)   \rResolving deltas:  85% (141/165)   \rResolving deltas:  90% (150/165)   \rResolving deltas:  92% (152/165)   \rResolving deltas:  93% (154/165)   \rResolving deltas:  95% (158/165)   \rResolving deltas:  96% (160/165)   \rResolving deltas:  97% (161/165)   \rResolving deltas:  98% (163/165)   \rResolving deltas:  99% (164/165)   \rResolving deltas: 100% (165/165)   \rResolving deltas: 100% (165/165), done.\n","/content/pytorch-cifar\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"54dT1znrjQot","colab_type":"code","colab":{}},"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import torch.backends.cudnn as cudnn\n","\n","import torchvision\n","import torchvision.transforms as transforms\n","\n","import os\n","import argparse\n","\n","from models import *\n","from utils import progress_bar"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KVp8UJKxja1Z","colab_type":"code","colab":{}},"source":["device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","best_acc = 0  # best test accuracy\n","start_epoch = 0  # start from epoch 0 or last checkpoint epoch"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VbK8DY1ikK3o","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":117,"referenced_widgets":["6a660955b36d46049a2ab8a5c2bc724c","0f97938a13f1435780937a8e10165d87","90f953a2432b4c169bf0f53b0b0cf2e2","a2592519eab448afbcabb5e2d0914ec1","b2ea2a9fa49c40d8993b6cc64e9df8a3","486d685046ce4904abf49b37e6a1eceb","c5ff8007a5304f9c99c342eda04b9c90","61db3b6a6f804f2da4d0a34f625a15b4"]},"outputId":"89b0757d-170a-4125-b1d2-1b484fc58a0b","executionInfo":{"status":"ok","timestamp":1592113525666,"user_tz":-330,"elapsed":19041,"user":{"displayName":"rahul kanojia","photoUrl":"https://lh5.googleusercontent.com/-B4ue9wpQx_0/AAAAAAAAAAI/AAAAAAAAOTw/CtXLmFtMNOc/s64/photo.jpg","userId":"16980906388447563855"}}},"source":["print('==> Preparing data..')\n","transform_train = transforms.Compose([\n","    transforms.RandomCrop(32, padding=4),\n","    transforms.RandomHorizontalFlip(),\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n","])\n","\n","transform_test = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n","])\n","\n","trainset = torchvision.datasets.CIFAR10(\n","    root='./data', train=True, download=True, transform=transform_train)\n","trainloader = torch.utils.data.DataLoader(\n","    trainset, batch_size=128, shuffle=True, num_workers=2)\n","\n","testset = torchvision.datasets.CIFAR10(\n","    root='./data', train=False, download=True, transform=transform_test)\n","testloader = torch.utils.data.DataLoader(\n","    testset, batch_size=100, shuffle=False, num_workers=2)\n","\n","classes = ('plane', 'car', 'bird', 'cat', 'deer',\n","           'dog', 'frog', 'horse', 'ship', 'truck')\n"],"execution_count":6,"outputs":[{"output_type":"stream","text":["==> Preparing data..\n","Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"6a660955b36d46049a2ab8a5c2bc724c","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./data/cifar-10-python.tar.gz to ./data\n","Files already downloaded and verified\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZDKnVH5XlNvF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"b8291ad1-8010-4273-dce1-ebae390d8b71","executionInfo":{"status":"ok","timestamp":1592113525667,"user_tz":-330,"elapsed":18389,"user":{"displayName":"rahul kanojia","photoUrl":"https://lh5.googleusercontent.com/-B4ue9wpQx_0/AAAAAAAAAAI/AAAAAAAAOTw/CtXLmFtMNOc/s64/photo.jpg","userId":"16980906388447563855"}}},"source":["print('==> Building model..')\n","net = EfficientNetB0()"],"execution_count":7,"outputs":[{"output_type":"stream","text":["==> Building model..\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mtJUDarcXo1j","colab_type":"code","colab":{}},"source":["net = net.to(device)\n","if device == 'cuda':\n","    net = torch.nn.DataParallel(net)\n","    cudnn.benchmark = True"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JowOB931XtI0","colab_type":"code","colab":{}},"source":["net = torch.load('model.pth')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zm6CMtHdXtKs","colab_type":"code","colab":{}},"source":["net"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ao-g5EbJlS2N","colab_type":"code","colab":{}},"source":["\n","if 1==2:\n","    # Load checkpoint.\n","    print('==> Resuming from checkpoint..')\n","    assert os.path.isdir('checkpoint'), 'Error: no checkpoint directory found!'\n","    checkpoint = torch.load('./checkpoint/ckpt.pth')\n","    net.load_state_dict(checkpoint['net'])\n","    best_acc = checkpoint['acc']\n","    start_epoch = checkpoint['epoch']\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.SGD(net.parameters(), lr=0.01,\n","                      momentum=0.9, weight_decay=5e-4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7HLPLqBsm-rX","colab_type":"code","colab":{}},"source":["def train(epoch):\n","    print('\\nEpoch: %d' % epoch)\n","    net.train()\n","    train_loss = 0\n","    correct = 0\n","    total = 0\n","    for batch_idx, (inputs, targets) in enumerate(trainloader):\n","        inputs, targets = inputs.to(device), targets.to(device)\n","        optimizer.zero_grad()\n","        outputs = net(inputs)\n","        loss = criterion(outputs, targets)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss += loss.item()\n","        _, predicted = outputs.max(1)\n","        total += targets.size(0)\n","        correct += predicted.eq(targets).sum().item()\n","\n","        if batch_idx%50==0:\n","          print(batch_idx, len(trainloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'\n","                     % (train_loss/(batch_idx+1), 100.*correct/total, correct, total))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oGAXWVKanHO2","colab_type":"code","colab":{}},"source":["def test(epoch):\n","    global best_acc\n","    net.eval()\n","    test_loss = 0\n","    correct = 0\n","    total = 0\n","    with torch.no_grad():\n","        for batch_idx, (inputs, targets) in enumerate(testloader):\n","            inputs, targets = inputs.to(device), targets.to(device)\n","            outputs = net(inputs)\n","            loss = criterion(outputs, targets)\n","\n","            test_loss += loss.item()\n","            _, predicted = outputs.max(1)\n","            total += targets.size(0)\n","            correct += predicted.eq(targets).sum().item()\n","\n","            if batch_idx%10==0:\n","              progress_bar(batch_idx, len(testloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'\n","                         % (test_loss/(batch_idx+1), 100.*correct/total, correct, total))\n","\n","    # Save checkpoint.\n","    acc = 100.*correct/total\n","    if acc > best_acc:\n","        print('Saving..')\n","        state = {\n","            'net': net.state_dict(),\n","            'acc': acc,\n","            'epoch': epoch,\n","        }\n","        if not os.path.isdir('checkpoint'):\n","            os.mkdir('checkpoint')\n","        torch.save(state, './checkpoint/ckpt.pth')\n","        best_acc = acc"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HrtHtzH3nKlq","colab_type":"code","colab":{}},"source":["for epoch in range(69, start_epoch+130):\n","    train(epoch)\n","    test(epoch)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yrjyaq56npVw","colab_type":"code","colab":{}},"source":["torch.save(net.module.state_dict, 'net_state.pth')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VrfpqqBQ29jv","colab_type":"code","colab":{}},"source":["torch.save(net.module, \"model.pth\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8Z8QgUBW7fs3","colab_type":"code","colab":{}},"source":["batch_size = 1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"raiAJrmq8F-x","colab_type":"code","colab":{}},"source":["net.module"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tRK6YDiP3Br7","colab_type":"code","colab":{}},"source":["x = torch.randn(batch_size, 3, 32, 32, requires_grad=True).cuda()\n","torch_out = net(x)\n","\n","# Export the model\n","torch.onnx.export(net.module,               # model being run\n","                  x,                         # model input (or a tuple for multiple inputs)\n","                  \"cifar_efficient.onnx\",   # where to save the model (can be a file or file-like object)\n","                  export_params=True,        # store the trained parameter weights inside the model file\n","                  opset_version=10,          # the ONNX version to export the model to\n","                  do_constant_folding=True,  # whether to execute constant folding for optimization\n","                  input_names = ['input'],   # the model's input names\n","                  output_names = ['output'], # the model's output names\n","                  dynamic_axes={'input' : {0 : 'batch_size'},    # variable lenght axes\n","                                'output' : {0 : 'batch_size'}})"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qrAet8LD7eFG","colab_type":"code","colab":{}},"source":["!cp cifar_efficient.onnx /content/drive/My\\ Drive/"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"I95--rX6oG8v","colab_type":"text"},"source":[""]}]}